	{
		// SAHIL RAJPUT:==>  Use back ticks for clg in snippets coz we don't want ot escape them that way..
		// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
		// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
		// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
		// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
		// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
		// Placeholders with the same ids are connected.
		// Example:
		"Print to console": {
			"scope": "javascript,javascriptreact,typescript,typescriptreact",
			"prefix": "sr-l",
			"body": [
				"console.log(`${1: variable} (${2: placeIdentifier}) ==>`, $1);",
				""
			],
			"description": "Log output to console"
		},
		"Snippet Title": {
			"scope": "javascript,javascriptreact,typescript,typescriptreact",
			"prefix": "demoSnippet",
			"body": [
				"",
				"",
				""
			],
			"description": "Log output to console"
		},
		"Promise all": {
			"scope": "javascript,javascriptreact,typescript,typescriptreact",
			"prefix": "sr-promiseAll",
			"body": [
				"let results = await Promise.all([",
				"  fetch(url1),",
				"  fetch(url2),",
				"]);",
			],
			"description": "Log output to console"
		},
		"Execute Command": {
			"scope": "javascript,javascriptreact,typescript,typescriptreact",
			"prefix": "sr-executeCommand",
			"body": [
				"const { exec } = require('child_process');",
				"exec('${1:someCommand}', (error, stdout, stderr) => {",
				"\tconsole.log(`\\n••••••STDERR ==>`, stderr);",
				"\tconsole.log(`••••••STDOUT==>`, stdout);",
				"\tif (error) return console.error(`••••••ERROR ==>`, error);",
				"\t//Do something below on successful execution(error being falsy).",
				"\t// Use stdout to make something from output, on successful execution of the command.",
				"\t$2",
				"})",
				""
			],
			"description": "Log output to console"
		},
		"Read a file": {
			"scope": "javascript,javascriptreact,typescript,typescriptreact",
			"prefix": "sr-readFile",
			"body": [
				"const fs = require(\"fs\")",
				"fs.readFile(__dirname + '/${1:fileName.txt}', 'utf8', function (err, fileContent) {",
				"\tif (err) {",
				"\t\treturn console.log(`File not found.`);",
				"\t}",
				"\tconsole.log(`••••••CONTENT OF FILE ==> `, fileContent)",
				"\t${3://  Use `fileContent` here to access file data.}}",
				"})",
				"$0"
			],
			"description": "Log output to console"
		},
		"Write to file": {
			"scope": "javascript,javascriptreact,typescript,typescriptreact",
			"prefix": "sr-writeFile",
			"body": [
				"fs = require('fs');",
				"const dataToWrite = ${1:`Line1\\nLine2\\nLine3`}",
				"fs.writeFile(__dirname + '/${2:fileName.txt}', dataToWrite, 'utf8', (err) => (err) && console.log(`Writing to file failed with err =>`, err))",
				"$3"
			],
			"description": "Log output to console"
		},
		"Promise Variable": {
			"scope": "javascript,javascriptreact,typescript,typescriptreact",
			"prefix": "sr-promiseVar",
			"body": [
				"const valueReceived = new Promise((res, rej) => {",
				"\t$1",
				"\t$2",
				"\t// Use resolve and reject calls inside callbacks or some promise.",
				"\tres()",
				"\trej()",
				"})",
			],
			"description": "Log output to console"
		},
		"Promise Variable with await": {
			"scope": "javascript,javascriptreact,typescript,typescriptreact",
			"prefix": "sr-awaitPromiseVar",
			"body": [
				"const valueReceived = await new Promise((res, rej) => {",
				"\t// You  must use valueReceived inside of async function to make await work.",
				"\t$1",
				"\t$2",
				"\t// Use resolve and reject calls inside callbacks or some promise.",
				"\tres()",
				"\trej()",
				"})",
			],
			"description": "Log output to console"
		},
		"Async for await of": {
			"scope": "javascript,javascriptreact,typescript,typescriptreact",
			"prefix": "sr-asyncforawaitof",
			"body": [
				"(async function () {",
				"\tfor await (let item of ${1:someArray}) {}",
				"\t$2",
				"\t$3",
				"})();",
			],
			"description": "Log output to console"
		},
		"For await of": {
			"scope": "javascript,javascriptreact,typescript,typescriptreact",
			"prefix": "sr-forawaitof",
			"body": [
				"for await (let num of ${1:someArray}) {",
				"\t$2",
				"\t$3",
				"};",
			],
			"description": "Log output to console"
		},
		"Promise returning fuction": {
			"scope": "javascript,javascriptreact,typescript,typescriptreact",
			"prefix": "sr-prf",
			"body": [
				"const $1 = ($2) => {",
				"\treturn new Promise((res, rej) => {",
				"\t\t$3",
				"\t\tres()",
				"\t\trej()",
				"\t})",
				"}",
			],
			"description": "Log output to console"
		},
		"Arrow Function": {
			"scope": "javascript,javascriptreact,typescript,typescriptreact",
			"prefix": "sr-arrfunction",
			"body": [
				"const $1 = () => {",
				"\t$0",
				"\treturn \"\"",
				"}"
			],
			"description": "Log output to console"
		},
		"Elint VanillaJS Disable no-unused vars for  File": {
			"scope": "javascript,javascriptreact,typescript,typescriptreact",
			"prefix": "sr-js-nounusedvars-eslint",
			"body": [
				"/* eslint-disable no-unused-vars */"
			],
			"description": "Log output to console"
		},
		"Elint Typescript Disable no-unused vars for File": {
			"scope": "javascript,javascriptreact,typescript,typescriptreact",
			"prefix": "sr-ts-nounusedvars-eslint",
			"body": [
				"/* eslint-disable @typescript-eslint/no-unused-vars */"
			],
			"description": "Log output to console"
		},
		"Elint Disable eslint for File": {
			"scope": "javascript,javascriptreact,typescript,typescriptreact",
			"prefix": "sr-eslintdisable",
			"body": [
				"/* eslint-disable */"
			],
			"description": "Log output to console"
		},
		"live debug": {
			"scope": "javascript,javascriptreact,typescript,typescriptreact",
			"prefix": "sr-livedebug",
			"body": [
				"<div><pre><b>|--Live-Debug--|</b>{JSON.stringify({}, null, 2)}</pre></div>"
			],
			"description": "Log output to console"
		},
		"React Componet": {
			"scope": "javascript,javascriptreact,typescript,typescriptreact",
			"prefix": "sr-reactcomponent",
			"body": [
				"export const $1 = ({ $2 }) => {",
				"\t$0",
				"\treturn (",
				"\t\t<div>",
				"\t\t\t",
				"\t\t</div>",
				"\t)",
				"}"
			],
			"description": "Log output to console"
		},
		"Js Doc": {
			"scope": "javascript,javascriptreact,typescript,typescriptreact",
			"prefix": "sr-docsjs",
			"body": [
				"/**",
				" * $0",
				" */"
			],
			"description": "Log output to console"
		},
		"Immediately Invoked Function": {
			"scope": "javascript,javascriptreact,typescript,typescriptreact",
			"prefix": "sr-iif",
			"body": [
				"(function () {",
				"\tvar aName = \"Barry\";",
				"\t$1",
				"})();"
			],
			"description": "Immediately Invoked Function"
		},
		"Immediately Invoked Function Variable": {
			"scope": "javascript,javascriptreact,typescript,typescriptreact",
			"prefix": "sr-iif-variable",
			"body": [
				"let result = (function () {",
				"\t// * Function body here.",
				"\tlet name",
				"\t$1",
				"\treturn name;",
				"})();"
			],
			"description": "Immediately Invoked Function Variable"
		},
		"Immediately Invoked Async Function": {
			"scope": "javascript,javascriptreact,typescript,typescriptreact",
			"prefix": "sr-iif-async",
			"body": [
				"(async function () {",
				"\tvar aName =  await Promise.resolve(`Bary`);",
				"\t$1",
				"})();"
			],
			"description": "Immediately Invoked Function"
		},
		"Immediately Invoked Async Function with Prmoise": {
			"scope": "javascript,javascriptreact,typescript,typescriptreact",
			"prefix": "sr-iif-async-promise",
			"body": [
				"(async function () {",
				"\tvar valueReceived = await new Promise((resolve, reject) => {",
				"\t\t// Define callback below, and call resolve and reject in that.",
				"\t$1",
				"\t});",
				"\t// Use `valueReceived` below, like console.log(`So, we get the value as ==>`, valueReceived);",
				"\t$2",
				"})();",
			],
			"description": "Log output to console"
		},
		"Immediately Invoked Async Function with Prmoise Example": {
			"scope": "javascript,javascriptreact,typescript,typescriptreact",
			"prefix": "sr-iif-async-promiseEg",
			"body": [
				"(async function () {",
				"\tlet valueReceived = await new Promise((resolve, reject) => {",
				"\t\t// Define callback below, and call resolve and reject in that.",
				"\t\tsetTimeout(() => {",
				"\t\t\tresolve(\"Yikkesss\")",
				"\t\t\t// or reject('Nikess')",
				"\t\t}, 1000)",
				"\t});",
				"\t// Use \"valueReceived\" below, like console.log(`So, we get the value as ==>`, valueReceived);",
				"\tconsole.log(`So, we get the value as ==>`, valueReceived)",
				"})()",
			],
			"description": "Log output to console"
		},
		"Comments Prototype from Better Comments ~SahilRajput": {
			"scope": "javascript,typescript,typescriptreact",
			"prefix": "sr-commentshint",
			"body": [
				"// Just normal comment.",
				"// ? Things would be cooler now.",
				"// ! Things will be alert now.",
				"// * Things would be succeess now.",
				"// Todo: Things will be yellow now."
			],
			"description": "Comments Prototype from Better Comments ~SahilRajput"
		},
	}